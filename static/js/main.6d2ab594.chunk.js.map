{"version":3,"sources":["infrastructure/localStorage.ts","infrastructure/loginProvider.ts","appData/defaultData.js","components/header/userPanel.tsx","components/header/userMenu.tsx","components/header/header.tsx","components/forms/loginForm.tsx","App.js","serviceWorker.js","index.js"],"names":["LocalStorageProvider","Object","classCallCheck","this","hasObject","key","localStorage","getItem","putObject","obj","setItem","JSON","stringify","getUser","name","user","parse","find","x","undefined","LoginProvider","_this","cookies","get","isLogged","logout","remove","login","localStorageProvider","set","Cookies","data","users","id","roleId","roles","role","UserPanel","loginProvider","console","log","react_default","a","createElement","className","Link","to","UserMenu","Header","userMenu_UserMenu","userPanel_UserPanel","withStyles","root","border","color","height","input","props","classes","TextField_default","App","possibleConstructorReturn","getPrototypeOf","call","BrowserRouter","Fragment","header_Header","Route","exact","path","component","Home","LoginForm","Topics","Component","_ref","match","concat","url","Topic","render","_ref2","params","topicId","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d2ab594.chunk.js","sourcesContent":["import { IUser } from \"../common/interfaces\";\r\n\r\nexport class LocalStorageProvider {\r\n    hasObject = (key: string): boolean => {\r\n        return localStorage.getItem(key) !== null;\r\n    }\r\n\r\n    putObject = (key: string, obj: object): void => {\r\n        localStorage.setItem(key, JSON.stringify(obj));\r\n    }\r\n\r\n    getUser = (name: string): IUser | null => {\r\n        const users: IUser[] = JSON.parse(localStorage.getItem(\"users\")!);\r\n        const user = users.find(x => x.name === name);\r\n        return user === undefined ? null : user;\r\n    }\r\n}","\r\nimport { Cookies } from \"react-cookie\";\r\nimport { LocalStorageProvider } from \"./localStorage\";\r\n\r\nimport { IUser, ILocalStorageProvider } from \"../common/interfaces\";\r\n\r\ninterface ILoginProvider {\r\n    // getUser: () => IUser;\r\n    // isLogged: () => boolean;\r\n    // logout: () => void;\r\n}\r\n\r\nexport class LoginProvider {\r\n    private cookies: Cookies;\r\n    private localStorageProvider: ILocalStorageProvider;\r\n    constructor() {\r\n        this.localStorageProvider = new LocalStorageProvider();\r\n        this.cookies = new Cookies();\r\n    }\r\n\r\n    getUser = (): IUser => {\r\n        return this.cookies.get(\"user\");\r\n    }\r\n\r\n    isLogged = (): boolean => {\r\n        return this.getUser() !== undefined;\r\n    }\r\n\r\n    logout = (): void => {\r\n        this.cookies.remove(\"user\");\r\n    }\r\n\r\n    login = (name: string): void => {\r\n        const user: IUser = this.localStorageProvider.getUser(name) as IUser;\r\n        if (user) {\r\n            this.cookies.set(\"user\", user);\r\n        }\r\n    }\r\n}","export const data = {\r\n    users: [\r\n        {\r\n            id: 0,\r\n            name: \"Admin\",\r\n            roleId: 0,\r\n        },\r\n        {\r\n            id: 1,\r\n            name: \"User1\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"User3\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"User3\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"User4\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"User5\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"User6\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"User7\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"User8\",\r\n            roleId: 1,\r\n        },\r\n        {\r\n            id: 9,\r\n            name: \"Manager\",\r\n            roleId: 2,\r\n        },\r\n    ],\r\n    roles: [\r\n        {\r\n            id: 0,\r\n            role: \"admin\",\r\n        },\r\n        {\r\n            id: 1,\r\n            role: \"user\",\r\n        },\r\n        {\r\n            id: 2,\r\n            role: \"manager\",\r\n        },\r\n    ]\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LoginProvider } from \"../../infrastructure/loginProvider\";\r\n\r\nexport const UserPanel = (): JSX.Element => {\r\n    const loginProvider: LoginProvider = new LoginProvider();\r\n    console.log(loginProvider.getUser());\r\n    if (loginProvider.isLogged()) {\r\n        return (\r\n            <div className=\"menu-right\">{loginProvider.getUser().name}\r\n                ({loginProvider.getUser().roleId}) |&nbsp;\r\n                    {/* &nbsp;| */}\r\n                <Link to=\"/logout\">Выход</Link>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"menu-right\">\r\n            <Link to=\"/login\">Вход</Link>\r\n            {/* <Link to=\"/signin\">Регистрация</Link> */}\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LoginProvider } from \"../../infrastructure/loginProvider\";\r\n\r\nexport const UserMenu: () => JSX.Element | null = () => {\r\n    const loginProvider: LoginProvider = new LoginProvider();\r\n    console.log(loginProvider.getUser());\r\n\r\n    if (loginProvider.isLogged()) {\r\n        return (\r\n            <div className=\"menu-left\">\r\n                <Link to=\"/menu1\">Menu1</Link>\r\n                <Link to=\"/menu2\">Menu2</Link>\r\n            </div>\r\n        );\r\n    }\r\n    return (null);\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserPanel } from \"./userPanel\";\r\nimport { UserMenu } from \"./userMenu\";\r\n\r\nexport const Header: () => JSX.Element = () => {\r\n    return (\r\n        <div className=\"main-menu-container header menu\" >\r\n            <Link className=\"logo\" to=\"/\"/>\r\n            <UserMenu />\r\n            {/* <a className=\"logo\" href=\"/\"> </a> */}\r\n            <UserPanel />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles: any = {\r\n    root: {\r\n        border: 0,\r\n        color: \"white\",\r\n        height: 48,\r\n    },\r\n    input: {\r\n        color: \"white\",\r\n    },\r\n\r\n};\r\n\r\nexport function LoginForm(props: any) {\r\n    const { classes } = props;\r\n    return (\r\n        <form>\r\n            <TextField classes={{\r\n                root: classes.root,\r\n                input: classes.input,\r\n            }}>\r\n            </TextField>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(LoginForm);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { LoginProvider } from \"./infrastructure/loginProvider\";\nimport { LocalStorageProvider } from \"./infrastructure/localStorage.ts\";\nimport { data } from \"./appData/defaultData\";\nimport { Header } from \"./components/header/header\";\nimport LoginForm from \"./components/forms/loginForm\";\n\nclass App extends Component {\n  localStorageProvider;\n  loginProvider;\n  constructor() {\n    super();\n    this.localStorageProvider = new LocalStorageProvider();\n    this.loginProvider = new LoginProvider();\n  }\n  componentDidMount() {\n    for (const key in data) {\n      this.localStorageProvider.putObject(key, data[key]);\n    }\n    if (!this.loginProvider.isLogged()) {\n      this.loginProvider.login(\"User1\");\n    } else {\n      this.loginProvider.logout();\n    }\n  }\n\n  render() {\n    // console.log(this.loginProvider.isLogged());\n    return (\n      <Router>\n        <>\n          <Header />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/login\" component={LoginForm} />\n          <Route path=\"/topics\" component={Topics} />\n        </>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n  </div>\n);\n\nconst Topics = ({ match }) => (\n  <div>\n    <h2>Topics</h2>\n    <ul>\n      <li>\n        <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n      </li>\n      <li>\n        <Link to={`${match.url}/components`}>Components</Link>\n      </li>\n      <li>\n        <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n      </li>\n    </ul>\n\n    <Route path={`${match.url}/:topicId`} component={Topic} />\n    <Route\n      exact\n      path={match.url}\n      render={() => <h3>Please select a topic.</h3>}\n    />\n  </div>\n);\n\nconst Topic = ({ match }) => (\n  <div>\n    <h3>{match.params.topicId}</h3>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}